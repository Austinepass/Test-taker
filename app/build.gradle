plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    // TODO: id 'com.google.gms.google-services'
}

android {
    buildFeatures {
        buildConfig = true
    }

    namespace 'com.orgustine.testtaker'
    compileSdk 34

    defaultConfig {
        applicationId "com.orgustine.testtaker"
        minSdk 25
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())

        buildConfigField "String", "API_KEY", "\"${properties.getProperty("API_KEY")}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    buildFeatures {
        buildFeatures {
            compose = true
        }

        composeOptions {
            kotlinCompilerExtensionVersion = "1.4.8"
        }

    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}
dependencies {

    implementation libs.androidx.ktx
    implementation libs.androidx.lifecycleRuntime
    implementation libs.androidx.lifecycleLivedata
    implementation libs.androidx.lifecycleViewmodel
    implementation libs.androidx.appcompat

    // Google AI client SDK for Android
    implementation(libs.generativeai)

    // Dagger Hilt
    implementation libs.google.daggerHiltAndroid
    implementation libs.androidx.hiltNavCompose
    kapt libs.google.daggerHiltCompiler

    // TODO: Firebase
    /*implementation(platform("com.google.firebase:firebase-bom:$firebaseBomVersion"))
    implementation "com.google.firebase:firebase-firestore-ktx"
    implementation 'com.google.firebase:firebase-storage'*/

    // Google Play Services
    implementation libs.play.services.auth

    //Retrofit
    implementation libs.square.retrofit
    implementation libs.square.retrofitConverterMoshi
    implementation libs.square.okhttpLoggingInterceptor


    // Splashscreen
    implementation libs.androidx.coreSplashscreen

    // Coil
    implementation libs.coilCompose

    // Jetpack Compose
    def composeBom = platform libs.androidx.compose.bom
    implementation(composeBom)
    androidTestImplementation(composeBom)


    // Material Design 3
    implementation libs.androidx.composeMaterial3

    // Integration with activities
    implementation libs.androidx.activityCompose

    // Integration with ViewModels
    implementation libs.androidx.lifecycleViewmodelCompose

    // Compose Navigation
    implementation libs.androidx.navigation.compose

    // Android Studio Preview support
    implementation libs.androidx.composeUiToolingPreview
    debugImplementation libs.androidx.composeUiTooling

    // UI Tests
    androidTestImplementation libs.androidx.composeUiTestJunit4
    debugImplementation libs.androidx.composeUiTestManifest

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.testEspressoCore
}